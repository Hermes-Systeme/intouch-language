

#Git-eigene und git-ftp Dateien nicht rüberschmeißen
.gitattributes
.gitlab-ci.yml


#Projektspezifische 
#zzViRu_Tropicana/*

**/temp/*


#----------------------------------------------------------------------------------------------------------------------
#Git-FTP-Settings --> https://github.com/git-ftp/git-ftp/blob/master/man/git-ftp.1.md

#git config git-ftp.url "ftpes://172.19.223.13:21/____Projekte/Stadthagen/Wirtschaftsbetriebe Stadthagen Tropicana/"
# git config git-ftp.user "v.ruhl"
# git config git-ftp.password ""

#oder einfach in .git ordner in die Datei config
# [git-ftp]
# 	user = v.ruhl
# 	password = "Locke#75"
# 	url = ftpes://172.19.223.13:21/____Projekte/Stadthagen/Wirtschaftsbetriebe Stadthagen Tropicana/
# 	insecure = 1



######################################################################################################################################
# Achtung, da der Hermes-Server kein öffentliches Zertifikat bereitstellt muss immer mot der Option --insecure abgeschlossen werden!
######################################################################################################################################

# Upload all files
#git ftp init

#Auf dem Rechner Befindliche Version als die Auf dem Server markieren!
#git ftp catchup

#Änderungen rüberspielen...
#git ftp push

#Das hier ist git selber: 3 letzten commits zurücksetzen!!!
#git checkout HEAD~3



#Mit scopes arbeiten
#   git config git-ftp.testing.url ftp.testing.com:8080/foobar-path
#   git config git-ftp.testing.password simp3l

# git ftp push -s testing


######################################################################################################################################
#DOWNLOADING FILES (EXPERIMENTAL)
#WARNING: It can delete local untracked files that are not listed in your .git-ftp-ignore file.

#Vollständig herunterladen
#  git ftp download

#Standart
#   git ftp pull


#Am besten folgend weise arbeiten:

# 1- Neues brunch erstellen un einchecken...
#   git checkout <remote-commit>

# 2- Vom FTP-Server herunterladen...
#   git ftp download

# 3- Alle zum Tracken und commiten...
#   git add --all
#   git commit -m '[git-ftp] aktuell auf dem Server'

# 4- aktuelles als das im Server kennzeichnen...
#   git ftp catchup

# 5- ins Arbeits-Brunsch zurückwechseln
#   git checkout <my-branch>

# 6- Zusammenführen
#   git merge <new-remote-commit>
#   Die Konflikte betrachten und entscheiden...


######################################################################################################################################
#HOOKS (EXPERIMENTAL)
#   pre-ftp-push    - wird ausgeführt vor dem Push 
#   post-ftp-push   - wird nach dem push und vor dem closen der connection ausgeführt


#Beispiel:
#       #!/bin/bash
#       # Datei: pre-ftp-push
#       # $1 -- Scope name if set or host name of the remote
#       # $2 -- URL to which the upload is being done
#       # $3 -- Local commit id which is being uploaded
#       # $4 -- Remote commit id which is on the server
#       # The status is either A for upload or D for delete. The path contains the path to the local file. It contains the syncroot if set.
#       
#       
#       remote="$1"
#       url="$2"
#       local_sha="$3"
#       remote_sha="$4"
#       
#       while read -r -d '' status file
#       do
#       	if [ "$status" = "A" ]
#       	then
#       		if grep 'TODO' "$file"; then
#       			echo "TODO found in file $file, not uploading."
#       			exit 1
#       		fi
#       	fi
#       done
#       
#       exit 0


######################################################################################################################################
# WichtigeInfos:

# EXIT CODES
#   1 : Unknown error
#   2 : Wrong Usage
#   3 : Missing arguments
#   4 : Error while uploading
#   5 : Error while downloading
#   6 : Unknown protocol
#   7 : Remote locked
#   8 : Not a Git project
#   9 : The pre-ftp-push hook failed
#   10 : A local file operation like cd or mkdir failed

# als defaul mögliche Parameter:
#   git config git-ftp.user john
#   git config git-ftp.url ftp.example.com
#   git config git-ftp.password secr3t
#   git config git-ftp.syncroot path/dir
#   git config git-ftp.cacert caCertStore
#   git config git-ftp.deployedsha1file mySHA1File
#   git config git-ftp.insecure 1
#   git config git-ftp.key ~/.ssh/id_rsa
#   git config git-ftp.keychain user@example.com
#   git config git-ftp.remote-root htdocs
#   git config git-ftp.disable-epsv 1
#   git config git-ftp.no-commit 1


# URL
#   protocol://host.domain.tld:port/path

#   ftp://...   : FTP (default if no protocol is set)
#   sftp://...  : SFTP
#   ftps://...  : FTPS
#   ftpes://... : FTP over explicit SSL (FTPES) protocol

